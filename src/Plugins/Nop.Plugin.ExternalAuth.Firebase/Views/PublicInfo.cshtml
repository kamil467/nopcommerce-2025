@using Nop.Plugin.ExternalAuth.Firebase
@inject FirebaseExternalAuthSettings firebaseSettings
@{
    Layout = "";
}

<link rel="stylesheet" href="~/Plugins/ExternalAuth.Firebase/Content/firebasestyles.css" />

<div class="firebase-login-block">
    <div id="firebaseui-auth-container"></div>
</div>

<script src="https://www.gstatic.com/firebasejs/10.5.2/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/10.5.2/firebase-auth-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/ui/6.1.0/firebase-ui-auth.js"></script>
<link type="text/css" rel="stylesheet" href="https://www.gstatic.com/firebasejs/ui/6.1.0/firebase-ui-auth.css" />

<script>
    // Initialize Firebase
    const firebaseConfig = {
        apiKey: "@firebaseSettings.ApiKey",
        authDomain: "@firebaseSettings.AuthDomain",
        projectId: "@firebaseSettings.ProjectId"
    };

    // Initialize Firebase
    firebase.initializeApp(firebaseConfig);

    // Initialize the FirebaseUI Widget using Firebase
    var ui = new firebaseui.auth.AuthUI(firebase.auth());

    var uiConfig = {
        callbacks: {
            signInSuccessWithAuthResult: function(authResult, redirectUrl) {
                // Get the user's ID token
                authResult.user.getIdToken().then(function(idToken) {
                    // Pass the ID token to your backend
                    window.location.href = '@Url.Action("SignInCallback", "FirebaseAuthentication")?idToken=' + idToken;
                });
                return false;
            }
        },
        signInOptions: [
            firebase.auth.GoogleAuthProvider.PROVIDER_ID,
            firebase.auth.EmailAuthProvider.PROVIDER_ID
        ],
        signInFlow: 'popup',
        tosUrl: '#',
        privacyPolicyUrl: '#'
    };

    ui.start('#firebaseui-auth-container', uiConfig);
</script>
